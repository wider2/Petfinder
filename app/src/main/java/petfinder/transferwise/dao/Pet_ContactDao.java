package petfinder.transferwise.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PET__CONTACT".
*/
public class Pet_ContactDao extends AbstractDao<Pet_Contact, Long> {

    public static final String TABLENAME = "PET__CONTACT";

    /**
     * Properties of entity Pet_Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pet_id = new Property(1, Integer.class, "pet_id", false, "PET_ID");
        public final static Property State = new Property(2, String.class, "state", false, "STATE");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property Zip = new Property(4, String.class, "zip", false, "ZIP");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
    }

    private DaoSession daoSession;


    public Pet_ContactDao(DaoConfig config) {
        super(config);
    }
    
    public Pet_ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PET__CONTACT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PET_ID\" INTEGER," + // 1: pet_id
                "\"STATE\" TEXT," + // 2: state
                "\"CITY\" TEXT," + // 3: city
                "\"ZIP\" TEXT," + // 4: zip
                "\"ADDRESS\" TEXT," + // 5: address
                "\"PHONE\" TEXT," + // 6: phone
                "\"EMAIL\" TEXT);"); // 7: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PET__CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Pet_Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer pet_id = entity.getPet_id();
        if (pet_id != null) {
            stmt.bindLong(2, pet_id);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(3, state);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(5, zip);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Pet_Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer pet_id = entity.getPet_id();
        if (pet_id != null) {
            stmt.bindLong(2, pet_id);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(3, state);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(5, zip);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
    }

    @Override
    protected final void attachEntity(Pet_Contact entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Pet_Contact readEntity(Cursor cursor, int offset) {
        Pet_Contact entity = new Pet_Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // pet_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // state
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zip
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // email
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Pet_Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPet_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setState(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZip(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Pet_Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Pet_Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Pet_Contact entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
