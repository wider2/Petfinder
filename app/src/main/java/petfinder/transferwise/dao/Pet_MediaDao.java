package petfinder.transferwise.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PET__MEDIA".
*/
public class Pet_MediaDao extends AbstractDao<Pet_Media, Long> {

    public static final String TABLENAME = "PET__MEDIA";

    /**
     * Properties of entity Pet_Media.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pet_id = new Property(1, Integer.class, "pet_id", false, "PET_ID");
        public final static Property Photo = new Property(2, String.class, "photo", false, "PHOTO");
        public final static Property Size = new Property(3, String.class, "size", false, "SIZE");
    }

    private DaoSession daoSession;


    public Pet_MediaDao(DaoConfig config) {
        super(config);
    }
    
    public Pet_MediaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PET__MEDIA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PET_ID\" INTEGER," + // 1: pet_id
                "\"PHOTO\" TEXT," + // 2: photo
                "\"SIZE\" TEXT);"); // 3: size
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PET__MEDIA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Pet_Media entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer pet_id = entity.getPet_id();
        if (pet_id != null) {
            stmt.bindLong(2, pet_id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(3, photo);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(4, size);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Pet_Media entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer pet_id = entity.getPet_id();
        if (pet_id != null) {
            stmt.bindLong(2, pet_id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(3, photo);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(4, size);
        }
    }

    @Override
    protected final void attachEntity(Pet_Media entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Pet_Media readEntity(Cursor cursor, int offset) {
        Pet_Media entity = new Pet_Media( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // pet_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // photo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // size
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Pet_Media entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPet_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPhoto(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Pet_Media entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Pet_Media entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Pet_Media entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
